# -*- coding: utf-8 -*-
"""Predict Used Phones Price.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NU_jR3T3Adm3IhABf1gei-3RGi63RnOA

## File Preparation
**Instal kaggle and upload kaggle.json file**
"""

! pip install -q kaggle

from google.colab import files
files.upload()

"""**Download datasets from kaggle**"""

! mkdir ~/.kaggle
! cp kaggle.json ~/.kaggle/
! chmod 600 ~/.kaggle/kaggle.json
! kaggle datasets list

! kaggle datasets download -d ahsan81/used-handheld-device-data

"""**Create datasets directory and unzip file**"""

! mkdir datasets
! unzip used-handheld-device-data.zip -d datasets

"""## Data Preparation

**Import main lib**
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline
import seaborn as sns

"""**Load csv file**"""

usedPhones = pd.read_csv('datasets/used_device_data.csv')
usedPhones

"""**Get dataframe info**"""

usedPhones.info()

"""**See dataframe detail like count, mean, standar deviasi, etc**"""

usedPhones.describe()

"""**Check invalid value**"""

usedPhones.isnull().sum()

"""**Check if contains duplicate data**"""

usedPhones.duplicated().sum()

"""**Visuallize features to see th using boxplot to see the outliers**"""

features = ['rear_camera_mp','front_camera_mp','internal_memory','ram','battery','weight']

for i in features:
    sns.boxplot(x=usedPhones[i])
    plt.show()

"""**There is some null value in features, removing those won't be a correct option as there is only have less rows**

**Better replace the values with median values because median values are not affected by outliers**
"""

for i in features:
    a=usedPhones[i].median()
    print(i,'new value : ', a)
    usedPhones[i]= usedPhones[i].fillna(a)

"""**Use IQR to overcome outliers and check the dataset size after dropped the outliers**"""

features=['screen_size','front_camera_mp','ram','battery','weight','normalized_used_price','normalized_new_price']
for i in features:
    lower = usedPhones[i].quantile(0.10)
    upper = usedPhones[i].quantile(0.90)
    usedPhones[i] = np.where(usedPhones[i] <lower, lower,usedPhones[i])
    usedPhones[i] = np.where(usedPhones[i] >upper, upper,usedPhones[i])
 
usedPhones.shape

"""**Treat internal_memory, battery and rear_camera_mp with different calculation, because they have different skewness outliers**"""

upper= usedPhones.rear_camera_mp.quantile(0.95)
usedPhones.rear_camera_mp= np.where(usedPhones.rear_camera_mp>upper,upper,usedPhones.rear_camera_mp)

upper= usedPhones.internal_memory.quantile(0.9)
usedPhones.internal_memory= np.where(usedPhones.internal_memory>upper,upper,usedPhones.internal_memory)

upper= usedPhones.weight.quantile(0.8)
usedPhones.weight= np.where(usedPhones.weight>upper,upper,usedPhones.weight)

"""**Check the outliers again by flatten the 2D array of subplots to make them easier to access**"""

fig,axs= plt.subplots(4,3,figsize=(15, 15))
num_features=[feature for feature in usedPhones.columns if usedPhones[feature].dtype != 'O']
axs = axs.ravel()
for i, feature in enumerate(num_features):
    
    axs[i].boxplot(usedPhones[feature])
    axs[i].set_title(feature)

# method used to remove an axis from a figure
fig.delaxes(axs[-1])
# Adjust the spacing between subplots
plt.tight_layout()
# Show the plot
plt.show()

"""## Univariate Analysis

**Count device_brand data percentage and visuallize bar chart**
"""

numerical_features = ['normalized_used_price', 'normalized_new_price', 'screen_size', 'rear_camera_mp', 'front_camera_mp', 'internal_memory', 'battery', 'weight', 'release_year', 'days_used']
categorical_features = ['device_brand', 'os', '4g', '5g', 'ram']

feature = categorical_features[0]
count = usedPhones[feature].value_counts()
percent = 100*usedPhones[feature].value_counts(normalize=True)
df = pd.DataFrame({'Total sample':count, 'percentage':percent.round(1)})
print(df)
count.plot(kind='bar', title=feature);

"""**Count os data percentage and visuallize bar chart**"""

feature = categorical_features[1]
count = usedPhones[feature].value_counts()
percent = 100*usedPhones[feature].value_counts(normalize=True)
df = pd.DataFrame({'Total sample':count, 'percentage':percent.round(1)})
print(df)
count.plot(kind='bar', title=feature);

"""**Count 4g data percentage and visuallize bar chart**"""

feature = categorical_features[2]
count = usedPhones[feature].value_counts()
percent = 100*usedPhones[feature].value_counts(normalize=True)
df = pd.DataFrame({'Total sample':count, 'percentage':percent.round(1)})
print(df)
count.plot(kind='bar', title=feature);

"""**Count 5g data percentage**"""

feature = categorical_features[3]
count = usedPhones[feature].value_counts()
percent = 100*usedPhones[feature].value_counts(normalize=True)
df = pd.DataFrame({'Total sample':count, 'percentage':percent.round(1)})
print(df)
count.plot(kind='bar', title=feature);

"""**Visuallize bar chart numerical_features**"""

usedPhones.hist(bins=40, figsize=(18,12))
plt.show()

"""## Multivariate Analysis

**Compare mean normalized_used_price with each features**
"""

cat_features = usedPhones.select_dtypes(include='object').columns.to_list()
 
for col in cat_features:
  sns.catplot(x=col, y="normalized_used_price", kind="bar", dodge=False, height = 5.5, aspect = 4,  data=usedPhones, palette="Set3")
  plt.title("Mean 'normalized_used_price' Relative to - {}".format(col))

"""**Check relation per features with normalized_used_price**"""

def bivariate_analysis(x):
    plt.figure(figsize=(10,6))
    ax = sns.regplot(x=x, y='normalized_used_price',data=usedPhones)
    ax.set_title("Used Price vs "+x, fontsize=25)
    ax.set_xlabel(x, fontsize=20)
    ax.set_ylabel('normalized_used_price', fontsize=20)
    plt.locator_params(axis='x', nbins=10)

cols = ['normalized_new_price', 'screen_size', 'rear_camera_mp', 'front_camera_mp', 'internal_memory', 'ram', 'battery', 'weight', 'release_year', 'days_used']
for x in cols:
    bivariate_analysis(x)
plt.tight_layout()

"""**Observe between numeric features with pairplot method**"""

sns.pairplot(usedPhones, diag_kind = 'kde')

"""**See value correlation matrix using sns.heatmap**"""

correlation_matrix = usedPhones.corr().round(2)
 
sns.heatmap(data=correlation_matrix, annot=True, cmap='coolwarm', linewidths=0.5, )
plt.title("Correlation matrix for numerical features ", size=20)

"""**Because Ram has no line as it has most values on 4, better dropped**"""

usedPhones.drop(['ram'], axis=1, inplace=True)
usedPhones

"""## Data Preparation

**Change 4g and 5g categorical to 0 & 1 value**
"""

dict_cat_symbol = {'yes':1,'no':0}
usedPhones['4g'] = usedPhones['4g'].map(dict_cat_symbol)
usedPhones['5g'] = usedPhones['5g'].map(dict_cat_symbol)

"""**Applied one hot encoding into categorical features**"""

from sklearn.preprocessing import  OneHotEncoder

usedPhones = pd.concat([usedPhones, pd.get_dummies(usedPhones['device_brand'], prefix='device_brand')],axis=1)
usedPhones = pd.concat([usedPhones, pd.get_dummies(usedPhones['os'], prefix='os')],axis=1)
usedPhones.drop(['device_brand','os'], axis=1, inplace=True)
usedPhones.head()

"""Visualize features which has a high correlation"""

dimension_features = ['normalized_new_price', 'battery','front_camera_mp','rear_camera_mp','screen_size']
sns.pairplot(usedPhones[dimension_features], plot_kws={"s": len(dimension_features)})

"""**Dimension reduction with PCA to reduce the number of features while retaining the information in the data**"""

from sklearn.decomposition import PCA
 
pca = PCA(n_components=len(dimension_features), random_state=12345)
pca.fit(usedPhones[dimension_features])
princ_comp = pca.transform(usedPhones[dimension_features])

"""**Check the proportion of information from the three components earlier.**"""

pca.explained_variance_ratio_.round(5)

"""Create new feature dimension and transform using pca"""

from sklearn.decomposition import PCA
pca = PCA(n_components=1, random_state=12345)
pca.fit(usedPhones[dimension_features])
usedPhones['dimension'] = pca.transform(usedPhones.loc[:, (dimension_features)]).flatten()
usedPhones.drop(dimension_features, axis=1, inplace=True)

"""Split data to train, test, split with proportion 95:5"""

from sklearn.model_selection import train_test_split
 
X = usedPhones.drop(["normalized_used_price"],axis =1)
y = usedPhones["normalized_used_price"]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.05, random_state = 12345)

print(f'Total sample in whole dataset: {len(X)}')
print(f'Total sample in train dataset: {len(X_train)}')
print(f'Total sample in test dataset: {len(X_test)}')

"""## Scaling and Normalization

**Scaling and Normalization numerical_features using MinMaxScaler only for data train**
"""

from sklearn.preprocessing import MinMaxScaler
 
numerical_features = ['weight','release_year','internal_memory','days_used','dimension']
scaler = MinMaxScaler()
scaler.fit(X_train[numerical_features])
X_train[numerical_features] = scaler.transform(X_train.loc[:, numerical_features])
X_train[numerical_features].head()

"""**Describe data train numerical_features**"""

X_train[numerical_features].describe().round(4)

"""## Model Development using K-Nearest Neighbor

**Prepare dataframe for analysis model**
"""

models = pd.DataFrame(index=['train_mse', 'test_mse'], 
                      columns=['KNN', 'Boosting', 'LinearRegression', 'SVR'])

from sklearn.neighbors import KNeighborsRegressor
from sklearn.metrics import mean_squared_error
 
knn = KNeighborsRegressor(n_neighbors=10)
knn.fit(X_train, y_train)
 
models.loc['train_mse','knn'] = mean_squared_error(y_pred = knn.predict(X_train), y_true=y_train)

"""## Model Development using Ada Boosting Regressor

**Create prediction model using Boosting Algorithm**
"""

from sklearn.ensemble import AdaBoostRegressor
 
boosting = AdaBoostRegressor(learning_rate=0.05, random_state=55)                             
boosting.fit(X_train, y_train)
models.loc['train_mse','Boosting'] = mean_squared_error(y_pred=boosting.predict(X_train), y_true=y_train)

"""# Model Development using LinearRegression

**Create prediction model using LinearRegression Algorithm**
"""

from sklearn.linear_model import LinearRegression
 
LG = LinearRegression()                             
LG.fit(X_train, y_train)
models.loc['train_mse','LinearRegression'] = mean_squared_error(y_pred=LG.predict(X_train), y_true=y_train)

"""# Model Development using Support Vector Regression

**Create prediction model using Support Vector Regression Algorithm**
"""

from sklearn.svm import SVR
 
SVR = SVR()                             
SVR.fit(X_train, y_train)
models.loc['train_mse','SVR'] = mean_squared_error(y_pred=SVR.predict(X_train), y_true=y_train)

"""## Evaluate Model

**Do the scaling of the numeric features in X_test so that it has mean=0 dan variance=1**
"""

X_test.loc[:, numerical_features] = scaler.transform(X_test[numerical_features])

"""**Create an mse variable whose contents are the dataframe values of the mse data train and test for each algorithm**"""

mse = pd.DataFrame(columns=['train', 'test'], index=['KNN','Boosting','LinearRegression','SVR'])
 
# Create a dictionary for each algorithm used
model_dict = {'KNN': knn, 'Boosting': boosting, 'LinearRegression': LG, 'SVR': SVR}
 
# Calculate the Mean Squared Error of each algorithm on the train and test data
for name, model in model_dict.items():
    mse.loc[name, 'train'] = mean_squared_error(y_true=y_train, y_pred=model.predict(X_train))
    mse.loc[name, 'test'] = mean_squared_error(y_true=y_test, y_pred=model.predict(X_test))
 
# Call mse
mse

"""## Predict Model

**Plot errors count of RandomForest, Boosting and KNN Algorithm**
"""

fig, ax = plt.subplots()
mse.sort_values(by='test', ascending=False).plot(kind='barh', ax=ax, zorder=3)
ax.grid(zorder=0)

"""**Do prediction with data test**"""

prediction = X_test.iloc[:3].copy()
pred_dict = {'used_price':y_test[:3]}
for name, model in model_dict.items():
    pred_dict['prediction_'+name] = model.predict(prediction).round(6)
 
pd.DataFrame(pred_dict)

"""Support Vector Regression (SVR) produces the smallest mse, We will choose this model as the best model for predicting used phone prices."""